import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.swagger:swagger-codegen:2.3.0')
    }
}

apply plugin: 'java-library'
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.alevadski'

configurations {
    generatedCompile
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'io.swagger:swagger-annotations:1.5.22'
}

sourceCompatibility = "7"
targetCompatibility = "7"

def swaggerSourceFile = 'spec.yml'
def swaggerTargetFolder = 'src/main/java'
def modelPackage = 'com.anchorfree.datafoundation.generated'

task generateApi {
    inputs.file("$projectDir/$swaggerSourceFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("$projectDir/$swaggerSourceFile")
        config.setOutputDir("$projectDir")
        config.setLang('java')
        config.setAdditionalProperties([
                'interfaceOnly'     : true,
                'generateModelDocs' : false,
                'enumPropertyNaming': 'snake_case',
                'modelPackage'      : modelPackage,
                'sourceFolder'      : swaggerTargetFolder
        ])
        def generator = new DefaultGenerator()
        def configInput = config.toClientOptInput()
        def opts = generator.opts(configInput)
        try {
            opts.generate()
        } catch (Exception e) {
            print("Generator throws exception: " + e)
        }
    }
}

clean.doFirst {
    delete("${projectDir}/$swaggerTargetFolder/com/anchorfree/datafoundation/generated")
    delete("${projectDir}/docs")
}

sourceSets {
    generated {
        compileClasspath = configurations.generatedCompile
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

compileGeneratedJava.dependsOn generateApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava